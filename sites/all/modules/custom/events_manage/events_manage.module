<?php
/**
 * Implements hook_menu().
 */
function events_manage_menu() {
  $items['event/view'] = array(
    'title' => 'View Events',
    'description' => '',
    'page callback' => 'view_events_callback',
    'access callback' => true);

  $items['em_event/frontpage'] = array(
    'title' => 'Front Page',
    'description' => '',
    'page callback' => 'em_frontpage_callback',
    'access callback' => true
  );

  $items['event/events_data'] = array(
    'title' => 'Events Data',
    'type' => MENU_CALLBACK,
    'description' => '',
    'page callback' => 'events_data_callback',
    'access callback' => true);

  $items['event/list_events_html'] = array(
    'title' => 'Events Data',
    'type' => MENU_CALLBACK,
    'description' => '',
    'page callback' => 'list_events_html_callback',
    'access callback' => true);

  $items['event/manage'] = array(
    'title' => 'Manage Events',
    'description' => '',
    'page callback' => 'manage_events_callback',
    'access callback' => 'em_has_access',
    'access arguments' => array('event','manage')
  );
  $items['event_add_ajax/%'] = array(
    'title' => 'Ajax add event callback',
    'type' => MENU_CALLBACK,
    'access callback' => true,
    'page callback' => 'event_add_ajax_callback',
    'page arguments' => array(1),
  );
  $items['event_edit_ajax/%/%'] = array(
    'title' => 'Ajax edit event callback',
    'type' => MENU_CALLBACK,
    'access callback' => true,
    'page callback' => 'event_edit_ajax_callback',
    'page arguments' => array(1,2),
  );
  $items['event_delete/%'] = array(
    'title' => 'Delete event',
    'type' => MENU_CALLBACK,
    'page callback' => 'event_delete_callback',
    'page arguments' => array(1),
    'access callback' => true,

  );

  return $items;
}


function list_events_html_callback($args) {
  if(isset($_REQUEST['start_date'])) {
    $events = get_events($_REQUEST['start_date'], $_REQUEST['end_date']);

    $output = "" . theme('em_events', array('events' => $events, 'is_manage' => false, 'view_type' => 'only_list'));
    $output_array = array('list_events_html' => $output);
    echo json_encode($output_array);
  }
}

function login_modal() {
/*

  <div class="modal fade" id="addEventModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title" id="addEventModalLabel">Add Event</h4>
      </div>
      <div class="modal-body">
        <div>
          <?
            $node = new stdclass();
            $node->type = 'event';
            node_save($node);
            $form_state = array();
            $form_state['event_node'] = $node;
            echo render(drupal_build_form('event_manage_add_event_form',$form_state, 'modal'));
          ?>

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button id="save-event" type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>
*/
}

/**
 * Frontpage callback.
 */
function em_frontpage_callback($args) {
  
  $login_form = drupal_get_form("user_login");
  $output = theme('em_form_modal', array('modal_id' => 'em_user_login_modal', 'form_rendered' => drupal_render($login_form)));



  $register_form = drupal_get_form("user_register_form");
  $output .= theme('em_form_modal', array('modal_id' => 'em_user_register_modal', 'form_rendered' => drupal_render($register_form)));
  

  $GLOBALS['em_secondary_tabs_not'] = true;
  $GLOBALS['em_banner'] = true;
  //Adding the front page js file
  $em_frontpage_js_path = drupal_get_path("module", "events_manage") . "/js/em_frontpage.js";
  drupal_add_js($em_frontpage_js_path);
  //Adding the events filter js path.
  $events_filter_js_path = drupal_get_path("module", "events_manage") . "/js/em_events_filter.js";
  drupal_add_js($events_filter_js_path);
  //Adding the events js helper.
  $events_helper_js_path = drupal_get_path("module", "events_manage") . "/js/events_helper.js";
  drupal_add_js($events_helper_js_path);

  //Adding the fullcalendar library.
  drupal_add_library('em_libraries', 'fullcalendar');
  //Adding the common calendar to the js path
  $common_calendar_js_path = drupal_get_path("module", "events_manage") . "/js/em_common_calendar.js";
  drupal_add_js($common_calendar_js_path);
  //Adding the common events js
  $common_events_js_path = drupal_get_path("module", "events_manage") . "/js/common_events.js";
  drupal_add_js($common_events_js_path);
  
  $em_frontpage_css_path = drupal_get_path("module", "events_manage") . "/em_frontpage.css";
  drupal_add_css($em_frontpage_css_path);

  $events = get_events();
  return $output . "" . theme('em_events', array('events' => $events, 'is_manage' => false, 'view_type' => 'tile'));
}


/**
 * Events data callback.
 */
function events_data_callback($args) {
  $events = array();
  $events_ids = array();
  
  if(isset($_REQUEST['start_date'])) {
    $events = get_events($_REQUEST['start_date'], $_REQUEST['end_date']);
  } else {
    $events = get_events();
  }
  //Getting the events ids.
  foreach($events as $each_event) {
    $events_ids[] = $each_event->nid;
  }
  $events_loaded = node_load_multiple($events_ids);
  $events_json_data = array();
  $i = 0;
  foreach($events_loaded as $each_event) {
    $events_json_data[$i]['event_id'] = $each_event->nid;
    $events_json_data[$i]['title'] = $each_event -> title;
    $events_json_data[$i]['start_date'] = $each_event->field_date[LANGUAGE_NONE][0]['value'];
    $events_json_data[$i]['end_date'] = $each_event-> field_end_date[LANGUAGE_NONE][0]['value'];
    $i++;

  }
  echo json_encode($events_json_data);

}

/**
 * Implements hook_block_info().
 */
function events_manage_block_info() {
  $blocks['events_manage_filter_block'] = array('info' => t('Events filter sidebar block.'),
                                      'cache' => DRUPAL_NO_CACHE, );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function events_manage_block_view($delta='') {
  if($delta == 'events_manage_filter_block') {
    $output = "<ul class='nav nav-list'>
                 <li class='active'>
                   <a onClick='show_vocab_catalog(" . $term_id . ",0)'>All</a>
                 </li>
                 <li class=''>
                   <a onClick='show_vocab_catalog(" . $term_id . ",0)'>Featured Events</a>
                 </li>
                 <li class=''>
                   <a onClick='show_vocab_catalog(" . $term_id . ",0)'>Recent Events</a>
                 </li>";

      if(user_is_logged_in()) {
        $output .= "<li class=''>
                   <a onClick='show_vocab_catalog(" . $term_id . ",0)'>I am attending</a>
                 </li>";
      }

      $output .= "</ul>";

    $block['content'] = array('#markup' => $output);
    return $block;
  }
}

/**
 * Event delete callback.
 */
function event_delete_callback($event_id) {
  event_delete($event_id);
}

/**
 * Delete event helper function.
 */
function event_delete($event_id) {
  node_delete($event_id);
}

/**
 * Edit event through ajax call back.
 */
function event_edit_ajax_callback($ajax, $event_id) {
  $event_node = node_load($event_id);
  $form_state['event_node'] = $event_node;
  $commands[] = ajax_command_replace('#event_container_' . $event_id, "<div id='event_container_" . $event_id . "'>" . render(drupal_build_form('event_manage_add_event_form',$form_state)) . "</div>");
  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
}


/**
 * Add event through ajax call back
 */
function event_add_ajax_callback($ajax) {
  if($ajax == 'ajax') {
    $node = new stdclass();
    $node->type = 'event';
    node_save($node);
    $form_state = array();
    $form_state['event_node'] = $node;
    $commands[] = ajax_command_replace('#add_event', "<div id='add_event'>" . render(drupal_build_form('event_manage_add_event_form',$form_state)) . "</div>");

    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }
}
/**
 * Implements hook_theme().
 */
function events_manage_theme() {
  return array( 'em_events' => array(
                  'render element' => 'elements',
                  'template' => 'em_events',
                 ),
                 'em_each_event' => array(
                    'render_elements' => 'elements',
                    'template' => 'em_each_event',
                    'variables' => array('event' => array())
                  ),
                  'event_edit_modal' => array(
                    'render_elements' => 'elements',
                    'template' => 'event_edit_modal',
                    'variables' => array('event' => array())
                  ),
                 'event_manage_add_event_form'=>array(
                   'render element' => 'form'
                  ),
                 'em_each_event_tile' => array(
                    'render element' => 'elements',
                    'template' => 'em_each_event_tile'
                  ),
                  'em_form_modal' => array(
                    'render_elements' => 'elements',
                    'template' => "em_form_modal",
                    "variables" => array("modal_id" => "", "form_rendered" => "")
                  )


              );

}


/**
 * Add event form theme.
 */
function theme_event_manage_add_event_form($variables) {
  

  $output = '';
  $output = $output . "" . drupal_render($variables['form']['title']);
  $output .=  drupal_render($variables['form']['field_place']);
  $output .= drupal_render($variables['form']['field_date']);
  $output .= drupal_render($variables['form']['field_end_date']);

  $output .=  drupal_render($variables['form']['body']);
  $output .= drupal_render_children($variables['form']);
  return $output;  
}

/**
 * Callback for manage events.
 */
function manage_events_callback() {
  $GLOBALS['em_banner'] = true;
  //Adding the events filter js path.
  $events_filter_js_path = drupal_get_path("module", "events_manage") . "/js/em_events_filter.js";
  drupal_add_js($events_filter_js_path);
  //Adding the events js helper.
  $events_helper_js_path = drupal_get_path("module", "events_manage") . "/js/events_helper.js";
  drupal_add_js($events_helper_js_path);
  //Adding the fullcalendar library.
  drupal_add_library('em_libraries', 'fullcalendar');
  //Adding the common calendar to the js path
  $common_calendar_js_path = drupal_get_path("module", "events_manage") . "/js/em_common_calendar.js";
  drupal_add_js($common_calendar_js_path);

  //Adding events manage js path.
  $events_js_path = drupal_get_path('module', 'events_manage') . "/js/events_manage.js";
  drupal_add_js($events_js_path);
  //Adding the sidebar css.
  $add_event_manage_sidebar_css_path = drupal_get_path("module","events_manage") . "/events_manage_sidebar.css";
  drupal_add_css($add_event_manage_sidebar_css_path);
  //Adding the add event css path.
  $add_event_css_path = drupal_get_path('module', 'events_manage') . "/add_event.css";
  drupal_add_css($add_event_css_path);
  //Adding the modal events less.
  $event_modal_css_path = drupal_get_path('module','events_manage') . "/events_modal.css";
  drupal_add_css($event_modal_css_path);
  //Added the ajax and form libraries.
  drupal_add_library("system","drupal.ajax");
  drupal_add_library("system", "jquery.form");
  $output = "<div id='add_event'><a class='em_btn add_event' id='add_event_button' style=''>Add Event</a></div>";
  $events = get_events();
  $output = $output . "" . theme('em_events', array('events' => $events, 'is_manage' => true));
  return $output;
}

/**
 * Add event form.
 */
function event_manage_add_event_form($form, &$form_state, $context) {
  
  $node = $form_state['event_node'];
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#default_value' => isset($node->title) ? $node->title:''
  );
  field_attach_form('node', $node, $form, $form_state, LANGUAGE_NONE);
  unset($form['field_place']);
  unset($form['body']);
  $form['field_place'] = array(
    '#type' => 'textfield',
    '#title' => 'Place',
    '#default_value' => isset($node->field_place[LANGUAGE_NONE][0]['value']) ? $node->field_place[LANGUAGE_NONE][0]['value']:''
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title'=> 'Body',
    '#weight' => 100,
    '#default_value' => isset($node->body[LANGUAGE_NONE][0]['value']) ? $node->body[LANGUAGE_NONE][0]['value']:''
  );
      
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add Event'
  );

  $form['#submit'] = array();
  $form['#submit'][] = 'event_manage_add_event_form_submit_1';

  return $form;
}

function event_manage_add_event_form_validate($form, &$form_state) {
  
}

/**
 * Event add submit handler
 */
function event_manage_add_event_form_submit_1($form, &$form_state) {
  dd("add event");
  $node = $form_state['event_node'];
  field_attach_submit('node',$node,$form, $form_state);
  $node->body[LANGUAGE_NONE][0]['value'] = $form_state['values']['body'];
  $node->field_place[LANGUAGE_NONE][0]['value'] = $form_state['values']['field_place'];
  $node->title = $form_state['values']['title'];
  node_save($node);
}

/**
 * Callback function for viewing the events.
 */ 
function view_events_callback($args) {
  //if(user_is_logged_in()) {
    $GLOBALS['em_banner'] = true;
    //Adding the events filter js path.
    $events_filter_js_path = drupal_get_path("module", "events_manage") . "/js/em_events_filter.js";
    drupal_add_js($events_filter_js_path);
    //Adding the events js helper.
    $events_helper_js_path = drupal_get_path("module", "events_manage") . "/js/events_helper.js";
    drupal_add_js($events_helper_js_path);

    //Adding the fullcalendar library.
    drupal_add_library('em_libraries', 'fullcalendar');
	  //Adding the common calendar to the js path
    $common_calendar_js_path = drupal_get_path("module", "events_manage") . "/js/em_common_calendar.js";
    drupal_add_js($common_calendar_js_path);
    //Adding the common events js
    $common_events_js_path = drupal_get_path("module", "events_manage") . "/js/common_events.js";
    drupal_add_js($common_events_js_path);
  
    $events = get_events();
    return theme('em_events', array('events' => $events, 'is_manage' => false, 'view_type' => 'list'));
  //} else {
    
  //}
}

/**
 * Helper function for listing the events.
 */
function get_events($start_date = -1, $end_date = -1) {
  $query = db_select('node','n1');
  $query -> join('field_revision_field_date', 'fd',
    "fd.entity_id = n1.nid && fd.entity_type='node'");

  //Getting the place
  $query -> join('field_revision_field_place', 'fp',
    "fp.entity_id = n1.nid && fp.entity_type='node'");
  
  //Getting the body
  $query -> join('field_data_body', 'fb',
    "fb.entity_id = n1.nid && fb.entity_type='node'");
  if($start_date != -1) {
    $query -> condition("fd.field_date_value",$start_date,'>');
    $query -> condition("fd.field_date_value", $end_date, '<');
  }

  $query -> fields("n1",array('nid'));
  $query -> fields('fd',array('field_date_value'));
  $query -> fields('fp', array('field_place_value'));
  $query -> fields('n1', array('title'));
  $query -> fields('fb', array('body_value'));
  $query->execute();
  
  $result = $query->execute();
  
  $events = array();
  foreach ($result as $each_result) {
    $events[] = $each_result;  
  }
  
  return $events;

}